# for Thaty
from pymongo import MongoClient, database
from fastapi import FastAPI
from pydantic import BaseModel
from dotenv import load_dotenv
from os import environ
import certifi
from pprint import pprint
from bson.objectid import ObjectId
from typing import Optional
from starlette.responses import FileResponse

load_dotenv()

key = environ ['MONGODB_CONNECTION_STRING']

client = MongoClient(key, tlsCAFile=certifi.where())
db = client.wcoding

app = FastAPI()

class Post(BaseModel):
    id: Optional[int]
    image_urls: list[str]
    like_count: int
    comment_count: int
    creator: str
    description: str

# post = {
#     'comment_count': 3,
#     'like_count': 25,
#     'image_urls': [ 'Games', 'Spiderman', 'Movies'],
#     'creator': 'Thatiany Andrade',
#     'description': 'This is a post',
# }

# insert a single document into the collection called "posts"
@app.post('/posts')
async def create_post(post: Post):
    '''
    Function for creating a totally new blog post
    '''
    db.posts.insert_one(post)

    return {
        'data': post,
        'message': 'Post was created successfully'
    }


# find a SINGLE document from our collection
# _id is auto-generated by PyMongo and is unique to every document
# doc = db.test.find_one({'name': 'Thatiany'})
@app.get('/posts/{_id}')
async def get_post(_id):
    '''
    Function for retrieving a single post
    '''
    db.posts.find_one({'_id': ObjectId('')})

    return {
        'data': _id,
        'message': 'Here is the post you are looking for'
    }


@app.put('/posts/_id')
async def update_post(_id, post: Post):
    '''
    Function for updating a single, existing blog post
    '''
    for item in db.posts:
        if post.id == _id:
            item.image_urls = post.image_urls
            item.like_count = post.like_count
            item.comment_count = post.comment_count
            item.creator = post.creator
            item.description = post.description

    db.posts.update_one(
    {
        '_id': ObjectId('')
        }, # how do we know which document to update? (finding the document)
    {
        '$set': {
            'comment_count': 3,
            'like_count': 25,
            'image_urls': [ 'Games', 'Spiderman', 'Movies'],
            'creator': 'Spider Man',
            'description': 'Spiderwebs!',
        }
    }, # how to actually update that document (telling pymongo how we want to update the document)
)

@app.delete('/posts/{post_id}')
async def delete_post(_id):
    '''
    Function for deleting a single blog post
    '''
    db.posts.delete_one({'_id': ObjectId('')})

    message = f'Deleted post with id: {_id}'
    return {
        'data': message
    }

@app.get('/posts')
async def get_posts():
    '''
    Function for getting full list of all blog posts
    '''
    return {
        'data': db.posts,
        'message': 'Here is the full list of blog posts'
    }

# pprint(doc)

# finding multiple documents from out collection
# specify the query in the first dictionary argument

# docs = db.test.find({'name': 'Tierra Thompson'})

# for doc in docs:
#     print(doc)

#  some example ObjectIds
# 61b9d713d17b5b25c51f8cdf
# 61b9d720947e6fdaf0b42916
# 61b9de1cf67b9d185fa55635
# 61beb27e2d298a9f6b124b43

# db.posts.update_one(
#     {
#         '_id': ObjectId('61bd766b881fe7680cf78c0e')
#         }, # how do we know which document to update? (finding the document)
#     {
#         '$set': {
#             'comment_count': 3,
#             'like_count': 25,
#             'image_urls': [ 'Games', 'Spiderman', 'Movies'],
#             'creator': 'Spider Man',
#             'description': 'Spiderwebs!',
#         }
#     }, # how to actually update that document (telling pymongo how we want to update the document)
# )
# # doc =
# db.posts.find_one({'_id': ObjectId('61bd766b881fe7680cf78c0e')})

# # pprint(doc)

# #example of deleting one document from the database
# res = db.posts.delete_one({'_id': ObjectId('61bd766b881fe7680cf78c0e')})
# print(res.acknowledged) # value has to be True
# print(res.deleted_count) # value has to be 1 
# if values correct it means your request was sucessful